package objects.animal;

import objects.AbstractPositionedObject;
import objects.ObjectStates;
import random.RandomGenerator;
import position.MapDirection;
import position.Vector2d;

import java.util.LinkedList;
import java.util.Objects;

public class Animal extends AbstractPositionedObject {


    private final LinkedList<FamilyMember> childrenAnimalList;
    private final LinkedList<FamilyMember> parentsAnimalList;
    private final Gens gens;

    private int energy;
    private MapDirection orientation;

    public Animal(Vector2d position, int energy, Gens gens) {
        super(position);
        this.energy = energy;
        this.gens = gens;
        this. orientation = MapDirection.values()[RandomGenerator.getRandomNumberInRange(0,7)];
        this.state = ObjectStates.ANIMAL;
        childrenAnimalList = new LinkedList<>();
        parentsAnimalList = new LinkedList<>();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Animal animal = (Animal) o;
        return energy == animal.energy &&
                orientation == animal.orientation &&
                Objects.equals(childrenAnimalList, animal.childrenAnimalList) &&
                Objects.equals(parentsAnimalList, animal.parentsAnimalList) &&
                Objects.equals(gens, animal.gens);
    }

    @Override
    public int hashCode() {
        return Objects.hash(orientation, childrenAnimalList, parentsAnimalList, gens, energy);
    }

    @Override
    public String toString() {
        return "Animal{" +
                "orientation=" + orientation +
                ", gens=" + gens +
                ", energy=" + energy +
                '}';
    }

    /**
     * Adds child to parent list
     * @param child - child to add
     * @param day - day when relationship started
     */
    public void addToChildrenList(Animal child, int day) {
        childrenAnimalList.add(new FamilyMember(child, day));
    }

    /**
     * Takes two parents and children and adds parents to child's list
     * @param parent1 - first parent
     * @param parent2 - second parent
     * @param day - day when relationship started
     */
    public void addToParentsList(Animal parent1, Animal parent2, int day) {
        parentsAnimalList.add(new FamilyMember(parent1, day));
        parentsAnimalList.add(new FamilyMember(parent2, day));
    }

    /**
     * Moves and rotates animal to generated by genome position
     */
    public Vector2d moveAnimal(){
        int genMove = gens.generateMove();
        orientation = orientation.rotateTo(genMove);
        position = position.addMirrored(orientation.toUnitVector());
        return position;
    }

    // Accessors and mutators

    public int getEnergy() {
        return energy;
    }
    public void setEnergy(int energy) {
        this.energy = energy;
    }

    public LinkedList<FamilyMember> getChildrenAnimalList() {
        return childrenAnimalList;
    }
    public Gens getGens() {
        return gens;
    }
}
