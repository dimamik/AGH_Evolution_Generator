package objects.animal;

import objects.AbstractPositionedObject;
import objects.ObjectStates;
import objects.random.RandomGenerator;
import position.MapDirection;
import position.Vector2d;

import java.util.LinkedList;
import java.util.Objects;

public class Animal extends AbstractPositionedObject {

    MapDirection orientation;
    LinkedList<FamilyMember> childrenAnimalList;
    LinkedList<FamilyMember> parentsAnimalList;
    Gens gens;
    int energy;
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Animal animal = (Animal) o;
        return energy == animal.energy &&
                orientation == animal.orientation &&
                Objects.equals(childrenAnimalList, animal.childrenAnimalList) &&
                Objects.equals(parentsAnimalList, animal.parentsAnimalList) &&
                Objects.equals(gens, animal.gens);
    }

    public Gens getGens() {
        return gens;
    }
    @Override
    public int hashCode() {
        return Objects.hash(orientation, childrenAnimalList, parentsAnimalList, gens, energy);
    }
    public Animal(Vector2d position, int energy, Gens gens) {
        super(position);
        this.energy = energy;
        this.gens = gens;
        this. orientation = MapDirection.values()[RandomGenerator.getRandomNumberInRange(0,7)];
        this.state = ObjectStates.ANIMAL;
        childrenAnimalList = new LinkedList<>();
        parentsAnimalList = new LinkedList<>();
    }

    public void addToChildrenList(Animal child, int day) {
        childrenAnimalList.add(new FamilyMember(child, day));
    }

    public void addToParentsList(Animal parent1, Animal parent2, int day) {
        parentsAnimalList.add(new FamilyMember(parent1, day));
        parentsAnimalList.add(new FamilyMember(parent2, day));
    }

    /**
     * Moves and rotates animal to generated by genome position
     */
    public Vector2d moveAnimal(){
        int genMove = gens.generateMove();
        orientation = orientation.rotateTo(genMove);
        position = position.addMirrored(orientation.toUnitVector());
        return position;
    }
    public int getEnergy() {
        return energy;
    }

    public void setEnergy(int energy) {
        this.energy = energy;
    }
}
